
module Jagram::ConditionalStatement

  # 条件分岐 - もし
  #
  # 引数に渡した条件が条件が真のときに、
  # `{}`や`do .. end`で囲んだ処理を実行します。
  # 「ならば」は省略可能です。
  #
  # @example 条件分岐の使い方 - `{}`を使った`もし`の例
  #   i = 0
  #   もし( i == 0, ならば) {
  #     次を表示("iは0です") #> iは0です
  #   }
  #   もし( i == 0) { # ちなみに、ならばは省略可能
  #     次を表示("iは0です") #> iは0です
  #   }
  #
  # @example もしの活用 - 条件が等しいときの例
  #   太郎君の挨拶 = "hello"
  #   英語の挨拶 = "hello"
  #   もし(太郎君の挨拶.は次と等しい(英語の挨拶), ならば) {
  #     次を表示("太郎君は英語がわかるのかもしれない")
  #   }
  #   もし(太郎君の挨拶 == 英語の挨拶, ならば) {
  #     次を表示("太郎君は英語がわかるのかもしれない")
  #   }
  #
  # @example もしの活用 - 条件が等しくないときの例
  #   英語の挨拶 = "hello"
  #   太郎君の挨拶 = "こんにちは"
  #   もし(太郎君の挨拶.は次と等しくない(英語の挨拶), ならば) {
  #     次を表示("英語がわからないのかもしれない")
  #   }
  #   もし(太郎君の挨拶 != 英語の挨拶, ならば) {
  #     次を表示("英語がわからないのかもしれない")
  #   }
  #
  # @example もしの活用 - 数字の比較 - 以上, より大きい
  #   太郎君の体重 = 60
  #   花子さんの体重 = 120
  #
  #   もし(花子さんの体重.は次の値以上(太郎君の体重), ならば) {
  #     次を表示("花子さんは太郎君よりも#{花子さんの体重 / 太郎君の体重}倍重たい") #> 花子さんは太郎君よりも2.0倍重たい
  #   }
  #
  #   もし(花子さんの体重 >= 太郎君の体重, ならば) {
  #     次を表示("花子さんは太郎君よりも#{花子さんの体重 / 太郎君の体重}倍重たい") #> 花子さんは太郎君よりも2.0倍重たい
  #   }
  #
  #   もし(花子さんの体重.は次の値より大きい(太郎君の体重), ならば) {
  #     次を表示("花子さんは太郎君よりも#{花子さんの体重 / 太郎君の体重}倍重たい") #> 花子さんは太郎君よりも2.0倍重たい
  #   }
  #
  #   もし(花子さんの体重 > 太郎君の体重, ならば) {
  #     次を表示("花子さんは太郎君よりも#{花子さんの体重 / 太郎君の体重}倍重たい") #> 花子さんは太郎君よりも2.0倍重たい
  #   }
  #
  # @example もしの活用 - 数字の比較 - 以下, より小さい
  #   太郎君の体重 = 60
  #   花子さんの体重 = 120
  #
  #   もし(太郎君の体重.は次の値以下(花子さんの体重), ならば) {
  #     次を表示("太郎君は花子さんより軽い") #> 太郎君は花子さんより軽い
  #   }
  #
  #   もし(太郎君の体重 <= 花子さんの体重, ならば) {
  #     次を表示("太郎君は花子さんより軽い") #>  太郎君は花子さんより軽い
  #   }
  #
  #   もし(太郎君の体重.は次の値より小さい(花子さんの体重), ならば) {
  #     次を表示("太郎君は花子さんより軽い") #> 太郎君は花子さんより軽い
  #   }
  #
  #   もし(太郎君の体重 < 花子さんの体重, ならば) {
  #     次を表示("太郎君は花子さんより軽い") #>  太郎君は花子さんより軽い
  #   }
  #
  # @param cond [Boolean] 条件
  # @param block [Proc] もし条件が真であった場合に、渡したブロックを実行する
  def もし(cond, cmd=ならば, &block)
    if cond
      block.call
    end
  end

  # @!visibility private
  def ならば
    :then
  end

  # @!visibility private
  def は次と等しくない(x)
    self == x
  end
  # @!visibility private
  def は次と等しい(x)
    self == x
  end

  # @!visibility private
  def は次の値以上(x)
    self >= x
  end

  # @!visibility private
  def は次の値以下(x)
    self <= x
  end

  # @!visibility private
  def は次の値より大きい(x)
    self > x
  end

  # @!visibility private
  def は次の値より小さい(x)
    self < x
  end

  # @!visibility private
  def は(val, cmd_type)
    case cmd_type
    when :eq_gte
      self >= val
    when :eq_lt
      self <= val
    when :gte
      self > val
    when :lt
      self < val
    when :eq
      self == val
    when :not_eq
      self != val
    end
  end
end
